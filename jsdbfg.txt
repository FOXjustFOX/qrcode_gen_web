async function generateQR() {
    const text = textInput.value.trim();
    const qrColor = qrColorInput.value;
    const bgColor = bgColorInput.value;


    if (!text) {
        qrCanvas.getContext('2d').clearRect(0, 0, qrSize, qrSize);
        return;
    }

    const ctx = adjustCanvasForHighDPI(qrCanvas, qrSize, qrSize); // Adjust for high DPI
    
    ctx.fillStyle = bgColor;
    ctx.fillRect(0, 0, qrSize, qrSize);

    const qrCode = await QRCode.create(text, {
        errorCorrectionLevel: 'H',
    });

    const usableSize = qrSize - 2 * margin;           // The region for actual QR modules
    const cellSize   = usableSize / qrCode.modules.size;

    // if the cell size is too small, increase the safe zone
    // if (cellSize < 6) {
    //     safeZone = logoSize * 1.2; // Add 2px padding
    // }



    // Draw the QR code manually, skipping the logo area
    qrCode.modules.data.forEach((bit, index) => {
        const col = index % qrCode.modules.size;
        const row = Math.floor(index / qrCode.modules.size);


        // Calculate module position
        const x = margin + (col * cellSize);
        const y = margin + (row * cellSize);
        ctx.fillRect(x, y, cellSize, cellSize);

        // Skip cells that overlap the logo area
        const logoStart = margin + (usableSize - safeZone) / 2;
        const logoEnd   = logoStart + safeZone;
        
        // logo width
        
        
        if (
          x >= logoStart &&
          x < logoEnd &&
          y >= logoStart &&
          y < logoEnd
        ) {
          return; // Skip drawing this cell
        }
        
        // Draw the module
        ctx.fillStyle = bit ? qrColor : bgColor;
        ctx.fillRect(x, y, cellSize, cellSize);

      });
      
      // const logoWidth = logoEndX - logoStartX;
      // logoSize = logoWidth;
    // Draw the SVG logo in the center
    await drawSvgToCanvas(
      logoSrc,
      qrCanvas,
      margin + usableSize / 2,
      margin + usableSize / 2,
      logoSize,
      logoSize,
      bgColor,
      qrColor
    );

    downloadBtn.style.display = "block";

    console.log(qrColorInput.value);
}